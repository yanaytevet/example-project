# Generated by Django 5.2 on 2025-05-18 12:24

import common.db_fields.list_field_with_choices
import common.time_utils
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import users.enums.bounce_status
import users.enums.email_validation_status
import users.enums.temporary_access_types
import users.models.temporary_access
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('permissions', common.db_fields.list_field_with_choices.ListFieldWithChoices(base_field=models.CharField(blank=True, choices=[], max_length=100, null=True), blank=True, default=list, size=None)),
                ('pic_url', models.CharField(blank=True, max_length=255, null=True)),
                ('is_unsubscribed', models.BooleanField(blank=True, default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EmailAddress',
            fields=[
                ('address', models.CharField(max_length=300, primary_key=True, serialize=False)),
                ('bounce_status', models.CharField(blank=True, default=users.enums.bounce_status.BounceStatus['NO_BOUNCE'], max_length=120)),
                ('email_validation_status', models.CharField(blank=True, choices=[(users.enums.email_validation_status.EmailValidationStatus['NOT_CHECKED'], users.enums.email_validation_status.EmailValidationStatus['NOT_CHECKED']), (users.enums.email_validation_status.EmailValidationStatus['VALID'], users.enums.email_validation_status.EmailValidationStatus['VALID']), (users.enums.email_validation_status.EmailValidationStatus['INVALID'], users.enums.email_validation_status.EmailValidationStatus['INVALID']), (users.enums.email_validation_status.EmailValidationStatus['CATCH_ALL'], users.enums.email_validation_status.EmailValidationStatus['CATCH_ALL']), (users.enums.email_validation_status.EmailValidationStatus['UNKNOWN'], users.enums.email_validation_status.EmailValidationStatus['UNKNOWN'])], default=users.enums.email_validation_status.EmailValidationStatus['NOT_CHECKED'], max_length=120)),
                ('validation_status_description', models.TextField(blank=True, default=str)),
                ('is_primary_email', models.BooleanField(blank=True, default=False)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='email_addresses', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TemporaryAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temporary_access_type', models.CharField(blank=True, choices=[(users.enums.temporary_access_types.TemporaryAccessType['RESET_PASSWORD'], users.enums.temporary_access_types.TemporaryAccessType['RESET_PASSWORD'])], default=users.enums.temporary_access_types.TemporaryAccessType['RESET_PASSWORD'], max_length=30)),
                ('access_id', models.CharField(blank=True, default=users.models.temporary_access.get_random_hash, max_length=18)),
                ('creation_time', models.DateTimeField(default=common.time_utils.TimeUtils.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
